name: Build Toolchain

on:
  push:
    branches:
      - swiftwasm
      - swiftwasm-release/5.3
      - swiftwasm-release/5.4
      - swiftwasm-release/5.5
      - swiftwasm-release/5.6
      - swiftwasm-release/5.7
  pull_request:
    branches:
      - swiftwasm
      - swiftwasm-release/5.3
      - swiftwasm-release/5.4
      - swiftwasm-release/5.5
      - swiftwasm-release/5.6
      - swiftwasm-release/5.7
    types: [opened, synchronize, reopened, labeled]
jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    # Run only on main branches to avoid triggers by non-collaborator
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'check-self-hosted-ci') }}
    outputs:
      ubuntu20_04_aarch64-label: ${{ steps.start-ubuntu20_04_aarch64-runner.outputs.label }}
      amazonlinux2_x86_64-label: ${{ steps.start-amazonlinux2_x86_64-runner.outputs.label }}
      ubuntu20_04_aarch64-ec2-instance-id: ${{ steps.start-ubuntu20_04_aarch64-runner.outputs.ec2-instance-id }}
      amazonlinux2_x86_64-ec2-instance-id: ${{ steps.start-amazonlinux2_x86_64-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start EC2 runner (ubuntu20_04_aarch64)
        id: start-ubuntu20_04_aarch64-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.SWIFTWASM_BUILDBOT_TOKEN }}
          ec2-image-id: ami-0d08b938af6d9dbb0 # swiftwasm-ci/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-arm64-server-20211129
          ec2-instance-type: c6g.large
          subnet-id: subnet-327f4a13
          security-group-id: sg-0429f5ec2bee9dc0c
      - name: Start EC2 runner (amazonlinux2_x86_64)
        id: start-amazonlinux2_x86_64-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.SWIFTWASM_BUILDBOT_TOKEN }}
          ec2-image-id: ami-059fc55111c686d49 # swiftwasm-ci/amzn2-ami-kernel-5.10-hvm-2.0.20211223.0-x86_64-gp2
          ec2-instance-type: c6i.large
          subnet-id: subnet-327f4a13
          security-group-id: sg-0429f5ec2bee9dc0c
  stop-runner:
    name: Stop self-hosted EC2 runner
    needs: [start-runner, build-toolchain]
    runs-on: ubuntu-latest
    # Required to stop the runner even if the error happened in the previous jobs
    if: ${{ always() && needs.start-runner.result == 'success' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner (ubuntu20_04_aarch64)
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.SWIFTWASM_BUILDBOT_TOKEN }}
          label: ${{ needs.start-runner.outputs.ubuntu20_04_aarch64-label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ubuntu20_04_aarch64-ec2-instance-id }}
      - name: Stop EC2 runner (amazonlinux2_x86_64)
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.SWIFTWASM_BUILDBOT_TOKEN }}
          label: ${{ needs.start-runner.outputs.amazonlinux2_x86_64-label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.amazonlinux2_x86_64-ec2-instance-id }}

  build-matrix:
    name: Build matrix
    needs: [start-runner]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    outputs:
      entries: ${{ steps.generate.outputs.entries }}
    steps:
      - name: Generate entries
        id: generate
        run: |
          MATRIX_ENTRIES="["
          MATRIX_ENTRIES="$MATRIX_ENTRIES"$(cat <<EOS
          {
            "build_os": "ubuntu-18.04",
            "agent_query": "ubuntu-18.04",
            "target": "ubuntu18.04_x86_64",
            "run_stdlib_test": true,
            "run_full_test": false,
            "run_e2e_test": true,
            "build_hello_wasm": true,
            "clean_build_dir": false,
            "free_disk_space": true
          },
          {
            "build_os": "ubuntu-20.04",
            "agent_query": "ubuntu-20.04",
            "target": "ubuntu20.04_x86_64",
            "run_stdlib_test": true,
            "run_full_test": false,
            "run_e2e_test": true,
            "build_hello_wasm": true,
            "clean_build_dir": false,
            "free_disk_space": true
          },
          {
            "build_os": "ubuntu-22.04",
            "agent_query": "ubuntu-22.04",
            "target": "ubuntu22.04_x86_64",
            "run_stdlib_test": true,
            "run_full_test": false,
            "run_e2e_test": true,
            "build_hello_wasm": true,
            "clean_build_dir": false,
            "free_disk_space": true
          },
          {
            "build_os": "macos-11",
            "agent_query": "macos-11",
            "target": "macos_x86_64",
            "run_stdlib_test": true,
            "run_full_test": true,
            "run_e2e_test": true,
            "build_hello_wasm": true,
            "clean_build_dir": false
          },
          {
            "build_os": "macos-11",
            "agent_query": ["self-hosted", "macOS", "ARM64"],
            "target": "macos_arm64",
            "run_stdlib_test": false,
            "run_full_test": false,
            "run_e2e_test": false,
            "build_hello_wasm": true,
            "clean_build_dir": true,
            "host_build_preset": "webassembly_host_base,install,RA"
          }
          EOS
          )

          if [[ ${{ needs.start-runner.result }} == "success" ]]; then
            MATRIX_ENTRIES="$MATRIX_ENTRIES,"
            MATRIX_ENTRIES="$MATRIX_ENTRIES"$(cat <<EOS
          {
            "build_os": "amazon-linux-2",
            "agent_query": "${{ needs.start-runner.outputs.amazonlinux2_x86_64-label }}",
            "target": "amazonlinux2_x86_64",
            "run_stdlib_test": false,
            "run_full_test": false,
            "run_e2e_test": false,
            "build_hello_wasm": true,
            "clean_build_dir": false
          }
          EOS
            )

            MATRIX_ENTRIES="$MATRIX_ENTRIES,"
            MATRIX_ENTRIES="$MATRIX_ENTRIES"$(cat <<EOS
          {
            "build_os": "ubuntu-20.04",
            "agent_query": "${{ needs.start-runner.outputs.ubuntu20_04_aarch64-label }}",
            "target": "ubuntu20.04_aarch64",
            "run_stdlib_test": false,
            "run_full_test": false,
            "run_e2e_test": false,
            "build_hello_wasm": true,
            "clean_build_dir": false
          }
          EOS
            )
          fi
          MATRIX_ENTRIES="$MATRIX_ENTRIES]"
          MATRIX_ENTRIES="${MATRIX_ENTRIES//$'\n'/''}"
          echo "::set-output name=entries::$MATRIX_ENTRIES"

  build-toolchain:
    env:
      TOOLCHAIN_CHANNEL: DEVELOPMENT
      DEVELOPER_DIR: /Applications/Xcode_13.0.app/Contents/Developer/
    needs: [build-matrix]
    if: ${{ always() }}
    strategy:
      matrix:
        include: ${{ fromJSON(needs.build-matrix.outputs.entries) }}

    name: Target ${{ matrix.target }}
    timeout-minutes: 0
    runs-on: ${{ matrix.agent_query }}
    steps:
      # TODO(katei): Remove this step after https://bugs.swift.org/browse/SR-15135 will be resolved
      - name: (Workaround) Uninstall pre-installed Swift toolchain on Linux
        if: ${{ matrix.build_os == 'ubuntu-20.04' || matrix.build_os == 'ubuntu-18.04' }}
        run: |
          # Installer script is here: https://github.com/actions/virtual-environments/blob/1cbea058249db750691ec74f1b3ba9a7b1605d26/images/linux/scripts/installers/swift.sh
          rm -f /usr/local/bin/swiftc /usr/local/bin/swift
          rm -rf /usr/share/swift/

      - name: Free disk space
        if: ${{ matrix.free_disk_space }}
        run: |
          df -h
          sudo apt-get purge libgcc-9-dev gcc-9 libstdc++-9-dev libgcc-10-dev gcc-10 libstdc++-10-dev
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /usr/share/dotnet
          sudo apt clean
          
          if docker info > /dev/null 2>&1; then
            docker rmi $(docker image ls -aq)
          fi
          df -h

      - uses: actions/checkout@v2
        with:
          path: swift
          fetch-depth: 0

      - name: Prepare sccache timestamp
        id: cache_timestamp
        run: |
          echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%I-%M-%S')"

      - name: Check Xcode version
        if: ${{ startsWith(matrix.build_os, 'macos-') }}
        run: |
          xcodebuild -version

      - uses: actions/cache@v3
        timeout-minutes: 30
        with:
          path: build-cache
          key: ${{ matrix.target }}-sccache-v12-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.target }}-sccache-v12-

      - name: Clean build directory
        if: ${{ matrix.clean_build_dir }}
        run: |
          rm -rf ${{ github.workspace }}/target-build \
            ${{ github.workspace }}/host-build \
            ${{ github.workspace }}/build-sdk \
            ${{ github.workspace }}/host-toolchain-sdk \
            ${{ github.workspace }}/dist-toolchain-sdk

      - name: Set HOST_BUILD_PRESET environment variable
        if: ${{ matrix.host_build_preset }}
        run: |
          echo "HOST_BUILD_PRESET=${{ matrix.host_build_preset }}" >> $GITHUB_ENV

      - name: Build ${{ matrix.target }} installable archive
        env:
          SKIP_XCODE_VERSION_CHECK: 1
        run: |

          case "${{ matrix.target }}" in
            "amazonlinux2_x86_64" | "ubuntu22.04_x86_64" | "ubuntu20.04_x86_64" | "ubuntu18.04_x86_64" | "ubuntu20.04_aarch64" | "macos_x86_64" | "macos_arm64")
              ./swift/utils/webassembly/ci.sh
            ;;
            *)
              echo "Unrecognised target: ${{ matrix.target }}"
              exit 1
            ;;
          esac

      - name: Check cache hit rate
        run: sccache --show-stats

      - name: Upload ${{ matrix.target }} installable archive
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.target }}-installable
          path: swift-wasm-${{ env.TOOLCHAIN_CHANNEL }}-SNAPSHOT-${{ matrix.target }}.tar.gz

      - name: Add wasmer in PATH for testing
        run: echo "$HOME/.wasmer/bin" >> $GITHUB_PATH

      - name: Run stdlib tests for wasi-wasm32
        if: ${{ matrix.run_stdlib_test }}
        run: |
          TARGET_STDLIB_BUILD_DIR=${{ github.workspace }}/target-build/swift-stdlib-wasi-wasm32
          ninja check-swift-wasi-wasm32-custom -C "$TARGET_STDLIB_BUILD_DIR"

      - name: Run all tests for wasi-wasm32
        if: ${{ matrix.run_full_test }}
        run: |
          TARGET_STDLIB_BUILD_DIR=${{ github.workspace }}/target-build/swift-stdlib-wasi-wasm32
          # Run all tests but ignore failure temporarily
          ninja check-swift-wasi-wasm32 -C "$TARGET_STDLIB_BUILD_DIR" || true

      - name: Pack test results
        if: ${{ matrix.run_full_test }}
        run: |
          tar cJf ./swift-test-results.tar.gz target-build/swift-stdlib-wasi-wasm32/swift-test-results
      - name: Upload test results
        uses: actions/upload-artifact@v1
        if: ${{ matrix.run_full_test }}
        with:
          name: ${{ matrix.target }}-test-results
          path: ./swift-test-results.tar.gz

      # Run e2e test
      - name: Prepare E2E test
        run: |
          INSTALL_DIR=$(mktemp -d)
          tar xf swift-wasm-$TOOLCHAIN_CHANNEL-SNAPSHOT-${{ matrix.target }}.tar.gz -C "$INSTALL_DIR"
          echo "TOOLCHAIN=$(find "$INSTALL_DIR" -name "swift-wasm-$TOOLCHAIN_CHANNEL-*" -type d | head -n1)" >> $GITHUB_ENV
      - name: Build hello.wasm
        shell: bash
        if: ${{ matrix.build_hello_wasm }}
        run: |
          echo 'print("Hello, world!")' > hello.swift
          $TOOLCHAIN/usr/bin/swiftc \
                -target wasm32-unknown-wasi \
                -sdk $TOOLCHAIN/usr/share/wasi-sysroot \
                hello.swift -o hello.wasm && \
                echo "Successfully linked hello.wasm"
      - name: Upload hello.wasm
        if: ${{ matrix.build_hello_wasm }}
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.target }}-hello.wasm
          path: hello.wasm
      - name: Checkout integration-tests
        if: ${{ matrix.run_e2e_test }}
        uses: actions/checkout@v2
        with:
          repository: swiftwasm/integration-tests
          path: integration-tests
      - name: Run integration tests
        if: ${{ matrix.run_e2e_test }}
        run: |
          $TOOLCHAIN/usr/bin/swift run # Use TOOLCHAIN env value
        working-directory: ${{ github.workspace }}/integration-tests
